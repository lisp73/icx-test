(defn run!
  "Run CSV to JSON transformation"
  [input output json-paths & [s]]
  (let [s (or s "c")
        s (if (= s "c") (char 44) (char 9))]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (first (csv/read-csv line :separator s))
                  mapped-row (map-row json-map (mappings json-paths))]
              (.write wtr (str (json/write-str mapped-row) "\n")))))))))

(comment (defn -main
  [input output json-paths & [s]]
  (time (run! input output json-paths s))))




;;CODE THAT MAY NOT BE NEEDED IN THE CSV-TO-JASON
(comment (defn ^long make-num
  [input]
  (cond
    (integer? input) input
    (empty?   input) 0
    (string?  input) (Long/parseLong (clojure.string/trim input))
    :else            0)))

(comment (defn ^double make-double
  [input]
  (cond
    (integer? input) input
    (empty?   input) 0.0
    (string?  input) (Double/parseDouble (clojure.string/trim input))
    :else            0.0)))

(comment (defn ^boolean make-bool
  [input]
  (boolean (Boolean/valueOf (clojure.string/trim input)))))

(comment (defn type-fn-fn
  [type-key]
  (cond
    (or (= type-key "int") (= type-key "long"))  make-num
    (or (= type-key "bool") (= type-key "boolean")) make-bool
    (or (= type-key "float") (= type-key "double")) make-double
    :else str)))

(comment (def type-fn
  (memoize type-fn-fn)))


(comment (defn add-cell
  [curr-map input-row cell-mapping]
  (assoc-in curr-map
            (:key-path cell-mapping)
            ((type-fn (:type cell-mapping))
                        (nth input-row (:col cell-mapping) nil)))))

(comment (defn map-row
  [input-row row-mappings]
  (let [len (count row-mappings)]
    (loop [curr   0
           result {}]
      (if (>= curr len) result
        (recur
          (inc curr)
          (add-cell result input-row (nth row-mappings curr))))))))



(defn run%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
              (.write wtr (str (json/write-str json-map) "\n"))))))))

(defn run-original%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
              (.write wtr (str (json/write-str (json-map) "\n")))))))))
            
            
(comment (defn run-original
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)
                  mapped-row (map-row (mappings json-map))]
              (.write wtr (str (json/write-str mapped-row) "\n")))))))))

;;  WORKS FOR PROJECT


;;Still havent been able to generalize this function to transfer csv->json, only able to change it through hard coding
(comment (defn run%%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
              ;;(.write wtr (str {:something (json/write-str json-map)}"\n"))))))))
               (.write wtr (str  (json/write-str {:id (nth (nth json-map 0)2)})"\n")))))))) )


==============================================================================================================
8/4/16
;;this is the code I'm working on now.
(defn run%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
              ;;(.write wtr (str {:something (json/write-str json-map)}"\n"))))))))
               (.write wtr (str  (json/write-str {:admin (nth (nth json-map 0)5)
                                                  :user {:id (nth (nth json-map 0)1)}
                                                  :event {:timestamp(nth (nth json-map 0)3)
                                                          :uuid(nth(nth json-map 0)0)}})"\n"))))))))


;;foundation
(comment (defn run%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
           (.write wtr (str  (json/write-str json-map)"\n")))))))));;[[...]][...]]
            


(comment (defn run%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
           (.write wtr (str  (json/write-str (get json-map 0)"\n"))))))))))
         

(comment (defn run%
  "Run CSV to JSON transformation"
  [input output]
    (do
      (with-open [rdr (io/reader input)]
        (with-open [wtr (io/writer output :append true)]
          (doseq [line (line-seq rdr)]
            (let [json-map (csv/read-csv line)]
           (.write wtr (str (json/write-str {:something (rest (nth (nth json-map 0)0))}))"\n"))))))))



